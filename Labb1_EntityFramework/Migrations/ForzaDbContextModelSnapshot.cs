// <auto-generated />
using System;
using Labb1_EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Labb1_EntityFramework.Migrations
{
    [DbContext(typeof(ForzaDbContext))]
    partial class ForzaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Labb1_EntityFramework.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Labb1_EntityFramework.Models.LeaveList", b =>
                {
                    b.Property<int>("LeaveListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveListID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("FK_LeaveTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LeaveListID");

                    b.HasIndex("FK_EmployeeID");

                    b.HasIndex("FK_LeaveTypeID");

                    b.ToTable("LeaveLists");
                });

            modelBuilder.Entity("Labb1_EntityFramework.Models.TypeOfLeave", b =>
                {
                    b.Property<int>("LeaveTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaveTypeID"));

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LeaveTypeID");

                    b.ToTable("TypeOfLeaves");
                });

            modelBuilder.Entity("Labb1_EntityFramework.Models.LeaveList", b =>
                {
                    b.HasOne("Labb1_EntityFramework.Models.Employee", "Employees")
                        .WithMany("Leaves")
                        .HasForeignKey("FK_EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labb1_EntityFramework.Models.TypeOfLeave", "TypeOfLeaves")
                        .WithMany("LeaveLists")
                        .HasForeignKey("FK_LeaveTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");

                    b.Navigation("TypeOfLeaves");
                });

            modelBuilder.Entity("Labb1_EntityFramework.Models.Employee", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("Labb1_EntityFramework.Models.TypeOfLeave", b =>
                {
                    b.Navigation("LeaveLists");
                });
#pragma warning restore 612, 618
        }
    }
}
